# rake/rdoctask is deprecated in favor of rdoc/task

if Rake.application
  Rake.application.deprecate('require \'rake/rdoctask\'', 'require \'rdoc/task\' (in RDoc 2.4.2+)', __FILE__)
end

require 'rubygems'

begin
  gem 'rdoc'
  require 'rdoc'
  require 'rdoc/task'
rescue LoadError, Gem::LoadError
end

# :stopdoc:

if defined?(RDoc::Task) then
  module Rake
    RDocTask = RDoc::Task unless const_defined? :RDocTask
  end
else
  require 'rake'
  require 'rake/tasklib'

  module Rake

    # NOTE: Rake::RDocTask is deprecated in favor of RDoc:Task which is included
    # in RDoc 2.4.2+.  Use require 'rdoc/task' to require it.
    #
    # Create a documentation task that will generate the RDoc files for
    # a project.
    #
    # The RDocTask will create the following targets:
    #
    # [<b><em>rdoc</em></b>]
    #   Main task for this RDOC task.
    #
    # [<b>:clobber_<em>rdoc</em></b>]
    #   Delete all the rdoc files.  This target is automatically
    #   added to the main clobber target.
    #
    # [<b>:re<em>rdoc</em></b>]
    #   Rebuild the rdoc files from scratch, even if they are not out
    #   of date.
    #
    # Simple Example:
    #
    #   Rake::RDocTask.new do |rd|
    #     rd.main = "README.rdoc"
    #     rd.rdoc_files.include("README.rdoc", "lib/**/*.rb")
    #   end
    #
    # The +rd+ object passed to the block is an RDocTask object. See the
    # attributes list for the RDocTask class for available customization options.
    #
    # == Specifying different task names
    #
    # You may wish to give the task a different name, such as if you are
    # generating two sets of documentation.  For instance, if you want to have a
    # development set of documentation including private methods:
    #
    #   Rake::RDocTask.new(:rdoc_dev) do |rd|
    #     rd.main = "README.doc"
    #     rd.rdoc_files.include("README.rdoc", "lib/**/*.rb")
    #     rd.options << "--all"
    #   end
    #
    # The tasks would then be named :<em>rdoc_dev</em>, :clobber_<em>rdoc_dev</em>, and
    # :re<em>rdoc_dev</em>.
    #
    # If you wish to have completely different task names, then pass a Hash as
    # first argument. With the <tt>:rdoc</tt>, <tt>:clobber_rdoc</tt> and
    # <tt>:rerdoc</tt> options, you can customize the task names to your liking.
    # For example:
    #
    #   Rake::RDocTask.new(:rdoc => "rdoc", :clobber_rdoc => "rdoc:clean", :rerdoc => "rdoc:force")
    #
